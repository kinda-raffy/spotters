#!/usr/bin/env python

import rospy
import actionlib
import time
import random
from std_msgs.msg import Duration
from nav_msgs.msg import Path
from geometry_msgs.msg import PoseStamped
from spot_msgs.msg import TrajectoryAction, TrajectoryGoal, TrajectoryResult
from typing import NoReturn, Callable, List

class DummyTrajectoryActionServer:
    def __init__(self):
        self.server = actionlib.SimpleActionServer('/spot/trajectory', TrajectoryAction, self.execute, False)
        self.server.start()

    def execute(self, goal):
        rospy.logdebug("Received a goal")
        time.sleep(2)  # Simulated action.

        if random.random() < 0.4:
            rospy.logdebug("Action failed")
            self.server.set_aborted(TrajectoryResult(success=False, message="Failure"))
        else:
            rospy.logdebug("Action completed")
            self.server.set_succeeded(TrajectoryResult(success=True, message="Success"))

class DummyPathPublisher:
    def __init__(self):
        self.publisher = rospy.Publisher("/spotters/navigator/path", Path, queue_size=10)
        rospy.logdebug("Publishing path to /spotters/navigator/path")

    def publish_path(self):
        path = Path()
        path.header.frame_id = 'body'

        # Create 20 poses in a line
        for i in range(20):
            pose = PoseStamped()

            # Set the header of the pose
            pose.header.frame_id = 'body'
            pose.header.stamp = rospy.Time.now()

            # Set the position of the pose
            pose.pose.position.x = i * 1.0  # Change the multiplication factor as per your requirement
            pose.pose.position.y = 0.0
            pose.pose.position.z = 0.0

            # Set the orientation of the pose (here we keep it as no rotation)
            pose.pose.orientation.x = 0.0
            pose.pose.orientation.y = 0.0
            pose.pose.orientation.z = 0.0
            pose.pose.orientation.w = 1.0

            # Add the pose to the path
            path.poses.append(pose)

        # Publish the path
        self.path_publisher.publish(path)
        rospy.logdebug("Published path")


if __name__ == '__main__':
    rospy.init_node('dummy_trajectory_action_server_and_publisher', log_level=rospy.DEBUG)
    rospy.loginfo("Starting dummy_trajectory_action_server_and_publisher...")
    server = DummyTrajectoryActionServer()
    publisher = DummyPathPublisher()

    # while not rospy.is_shutdown():
    publisher.publish_path()
    rospy.spin()
        # rospy.sleep(1)